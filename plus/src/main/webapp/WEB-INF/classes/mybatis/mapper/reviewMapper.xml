<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fa.plus.mapper.ReviewMapper">
	<insert id="insertReview" parameterType="com.fa.plus.domain.Review">
		INSERT INTO review(reviewNum, reviewScore, reviewSubject, reviewContent,
				reviewDate, showReview, memberIdx, orderNum)
			VALUES(#{reviewNum}, #{reviewScore}, #{reviewSubject}, #{reviewContent}, 
				SYSDATE, 1, #{memberIdx}, #{orderNum})
	</insert>
	
	<insert id="insertReviewFile" parameterType="com.fa.plus.domain.Review">
		INSERT INTO reviewPhoto(photoNum, reviewNum, fileName)
			VALUES(reviewPhoto_seq.NEXTVAL, #{reviewNum}, #{fileName})
	</insert>
	
	<select id="findByReviewSummary" parameterType="map" resultType="com.fa.plus.domain.Summary">
		SELECT NVL(COUNT(*), 0) count,
			   ROUND(NVL(AVG(reviewScore), 0), 1) ave,
			   COUNT(DECODE(reviewScore, 1, 1)) score1, 
			   COUNT(DECODE(reviewScore, 2, 1)) score2, 
			   COUNT(DECODE(reviewScore, 3, 1)) score3, 
			   COUNT(DECODE(reviewScore, 4, 1)) score4, 
			   COUNT(DECODE(reviewScore, 5, 1)) score5 
		FROM review r
		JOIN orders o ON r.orderNum = o.orderNum
        JOIN lessonDetail cd ON cd.detailNum = o.detailNum
		JOIN lesson c ON cd.classNum = c.classNum
		WHERE c.classNum = #{classNum} AND showReview = 1
	</select>

	<select id="listReview" parameterType="map" resultType="com.fa.plus.domain.Review">
		SELECT r.reviewNum, m1.userName, reviewScore, reviewContent, nickName as plusName, reviewSubject,
			replyContent, r.orderNum, filename, showReview, l.className, 
			TO_CHAR(reviewDate, 'YYYY-MM-DD') reviewDate, TO_CHAR(replyDate, 'YYYY-MM-DD') replyDate,  
			TO_CHAR(classDate, 'YYYY-MM-DD HH24:MI')classDate
			FROM review r
			JOIN orders o ON o.orderNum = r.orderNum
			JOIN lessonDetail cd ON cd.detailNum = o.detailNum
			JOIN lesson l on l.classNum = cd.classNum
			JOIN member1 m1 on m1.memberIdx = o.memberIdx
            JOIN member1 m2 on m2.memberIdx = l.memberIdx
            JOIN plus p on p.userId = m2.userId
			LEFT OUTER JOIN (
			SELECT reviewNum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY photoNum) filename
            FROM reviewPhoto
            GROUP BY reviewNum	
		) f ON r.reviewNum = f.reviewNum
		WHERE l.classNum = #{classNum} AND showReview = 1
		<choose>
			<when test="sortNo==2">
				ORDER BY reviewScore DESC, reviewDate DESC
			</when>
			<when test="sortNo==3">
				ORDER BY reviewScore ASC, reviewDate DESC
			</when>
			<otherwise>
				ORDER BY reviewDate DESC
			</otherwise>
		</choose>
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="dataCount2" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM review
		<where>
			<if test="memberIdx != null">
				memberIdx = #{memberIdx}
			</if>
			<if test="mode != null">
				<if test="mode == 2">
					AND ( replyContent IS NOT NULL )
				</if>
				<if test="mode == 3">
					AND ( replyContent IS NULL )
				</if>
			</if>
		</where>
	</select>
	
	<!-- 내가 쓴 리뷰 확인 -->
	<select id="listReview2" parameterType="map" resultType="com.fa.plus.domain.Review">
		SELECT r.reviewNum, reviewScore, reviewContent, nickName as plusName, reviewSubject,
			replyContent, r.orderNum, filename, showReview, c.className,
			TO_CHAR(reviewDate, 'YYYY-MM-DD') reviewDate, TO_CHAR(replyDate, 'YYYY-MM-DD') replyDate,  
			TO_CHAR(classDate, 'YYYY-MM-DD HH24:MI')classDate
		FROM review r
		JOIN member1 m ON r.memberIdx = m.memberIdx 
		JOIN orders o ON r.orderNum = o.orderNum
        JOIN LessonDetail cd ON o.detailNum = cd.detailNum
		JOIN Lesson c ON cd.classNum = c.classNum
		JOIN member1 m2 on m2.memberIdx = c.memberIdx
            JOIN plus p on p.userId = m2.userId 
		LEFT OUTER JOIN (
			SELECT reviewNum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY photoNum) filename
            FROM reviewPhoto
            GROUP BY reviewNum	
		) f ON r.reviewNum=f.reviewNum
		<where>
			<if test="memberIdx != null">
				r.memberIdx = #{memberIdx}
			</if>
			<if test="mode != null">
				<if test="mode == 2">
					AND ( replyContent IS NOT NULL )
				</if>
				<if test="mode == 3">
					AND ( replyContent IS NULL )
				</if>
			</if>
		</where>
		ORDER BY reviewDate DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<update id="updateReview" parameterType="com.fa.plus.domain.Review">
		UPDATE review SET replyContent = #{replyContent}, replyDate = SYSDATE
		WHERE reviewNum = #{reviewNum}
	</update>
	
	<select id="listReviewFile" parameterType="long" resultType="com.fa.plus.domain.Review">
		SELECT photoNum, reviewNum, fileName
		FROM reviewPhoto
		WHERE reviewNum = #{reviewNum}
	</select>
	
	<delete id="deleteReview" parameterType="long">
		DELETE FROM review
		WHERE reviewNum = #{reviewNum}
	</delete>
	
	<select id="reviewSeq" resultType="Long">
		SELECT review_seq.NEXTVAL FROM dual 
	</select>
	
	<!-- 플러스가 리뷰 확인-->
	<select id="classReviewList" parameterType="map" resultType="com.fa.plus.domain.Review">
		SELECT r.reviewNum, reviewScore, reviewSubject, reviewContent, m.userName,
			replyContent, r.orderNum, filename, c.className,
			TO_CHAR(reviewDate, 'YYYY-MM-DD') reviewDate, TO_CHAR(replyDate, 'YYYY-MM-DD') replyDate,  
			TO_CHAR(classDate, 'YYYY-MM-DD HH24:MI')classDate
		FROM review r
		JOIN member1 m ON r.memberIdx = m.memberIdx 
		JOIN orders o ON r.orderNum = o.orderNum
        JOIN LessonDetail cd ON o.detailNum = cd.detailNum
		JOIN Lesson c ON cd.classNum = c.classNum
		JOIN member1 m2 on m2.memberIdx = c.memberIdx
            JOIN plus p on p.userId = m2.userId 
		LEFT OUTER JOIN (
			SELECT reviewNum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY photoNum) filename
            FROM reviewPhoto
            GROUP BY reviewNum	
		) f ON r.reviewNum=f.reviewNum
		<where>
			<if test="memberIdx != null">
				m2.memberIdx = #{memberIdx}
			</if>
		</where>
		ORDER BY reviewDate DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="dataCountClass" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM review r
		JOIN orders o ON o.orderNum = r.orderNum
		JOIN lessonDetail ld on ld.detailNum = o.detailNum
		JOIN lesson l ON l.classNum = ld.classNum
		<where>
			<if test="memberIdx != null">
				l.memberIdx = #{memberIdx}
			</if>
		</where>
	</select>
	
	<select id="classMainReviewList" parameterType="long" resultType="com.fa.plus.domain.Review">
		SELECT r.reviewNum, reviewScore, reviewSubject, c.className,
			TO_CHAR(reviewDate, 'YYYY-MM-DD') reviewDate
		FROM review r
		JOIN member1 m ON r.memberIdx = m.memberIdx 
		JOIN orders o ON r.orderNum = o.orderNum
        JOIN LessonDetail cd ON o.detailNum = cd.detailNum
		JOIN Lesson c ON cd.classNum = c.classNum
		JOIN member1 m2 on m2.memberIdx = c.memberIdx
            JOIN plus p on p.userId = m2.userId 
		LEFT OUTER JOIN (
			SELECT reviewNum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY photoNum) filename
            FROM reviewPhoto
            GROUP BY reviewNum	
		) f ON r.reviewNum=f.reviewNum
		WHERE m2.memberIdx = #{memberIdx}
		ORDER BY reviewDate DESC
	</select>
</mapper>
